题目：
You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 
 思路：
 bfs 从source走
 
 代码：
 class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:

        m,n = len(grid),len(grid[0])
        q= deque()
        fresh = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    fresh += 1
                if grid[i][j] == 2:
                    q.append([i,j,0])
        if fresh == 0:
            return 0
        while q and fresh > 0:
            i,j,t = q.popleft()

            for ii,jj in [[i+1,j],[i-1,j],[i,j+1],[i,j-1]]:
                if ii>=0 and ii<m and jj>=0 and jj<n and grid[ii][jj] == 1:
                    q.append([ii,jj,t+1])
                    grid[ii][jj] = 2
                    fresh -= 1
        return t+1 if fresh==0 else -1
        
        
