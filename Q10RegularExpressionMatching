题目：
Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:

'.' Matches any single character.
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

 思路：
 dp 用ij去扫s和p 正常的就一起+1
 遇到*了选择不要 和要一个 要了j不走s走一个 不要就s不走 j走两个
 这个因为每次都有要不要的判断 很长是2**n 不好 所以 存起来ij的结果 如果遇到了的 这样再访问的时候就简单了 最多就是n*n个结果 所以要cache
 
 代码：
 class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        
        cache = {}
        
        def dfs(i,j):
            if (i,j) in cache:
                return cache[(i,j)]
            if i >= len(s) and j >= len(p):
                return True
            if j>= len(p):
                return False
            
            match = i < len(s) and (s[i]==p[j] or p[j]==".")
            
            if (j+1)<len(p) and p[j+1] == "*":
                cache[(i,j)] = dfs(i,j + 2) or (match and dfs(i + 1, j))
                return cache[(i,j)]
            
            if match:
                cache[(i,j)] = dfs(i+1, j + 1)
                return cache[(i,j)]
            
            cache[(i,j)] = False
            return False
        
        return dfs(0,0)
        
    知识点：
    缓存
