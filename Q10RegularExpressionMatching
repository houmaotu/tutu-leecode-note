题目：
Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:

'.' Matches any single character.
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

 思路：
 dp 用ij去扫s和p 正常的就一起+1
 遇到*了选择不要 和要一个 要了j不走s走一个 不要就s不走 j走两个
 这个因为每次都有要不要的判断 很长是2**n 不好 所以 存起来ij的结果 如果遇到了的 这样再访问的时候就简单了 最多就是n*n个结果 所以要cache
 
 代码：
 class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        
        cache = {}
        
        def dfs(i,j):
            if (i,j) in cache:
                return cache[(i,j)]
            if i >= len(s) and j >= len(p):
                return True
            if j>= len(p):
                return False
            
            match = i < len(s) and (s[i]==p[j] or p[j]==".")
            
            if (j+1)<len(p) and p[j+1] == "*":
                cache[(i,j)] = dfs(i,j + 2) or (match and dfs(i + 1, j))
                return cache[(i,j)]
            
            if match:
                cache[(i,j)] = dfs(i+1, j + 1)
                return cache[(i,j)]
            
            cache[(i,j)] = False
            return False
        
        return dfs(0,0)
        
    知识点：
    缓存
    
    厚毛兔麻烦版本
    class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        
        n = len(s)
        m = len(p)
        
        dp = {}

        
        def helper(i,j):
            if i<0 and j<0:
                dp[(i,j)] = True
                return
            elif j<0:
                dp[(i,j)] = False
                return
            elif i<0:
                if j%2 == 0:
                    dp[(i,j)] = False
                    return
                for t in range(1,j+1,2):
                    if p[t] != '*':
                        dp[(i,j)] = False
                        return
                dp[(i,j)] = True
                return
                                
            #print(i,j)            
            if (i,j) in dp:
                return
            if p[j] == s[i] or p[j] == ".":
                helper(i-1,j-1)
                dp[(i,j)]  = dp[(i-1,j-1)] 
            
            elif p[j] == "*":
                if p[j-1] == s[i] or p[j-1] == ".":
                    helper(i-1,j)
                    helper(i,j-2)
                    dp[(i,j)] =  dp[(i,j-2)] or dp[(i-1,j)]
                else:
                    helper(i,j-2)
                    dp[(i,j)] =  dp[(i,j-2)]
                    
               
            else: #neq
                dp[(i,j)]  = False
                
            
            
        helper(n-1,m-1)
        #print(dp)
        return dp[(n-1,m-1)]
