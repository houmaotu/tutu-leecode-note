题目：
The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root.

Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night.

Given the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.

思路：
recursive call

代码：

class Solution:
    def __init__(self):
        self.lib = {}
    
    def rob(self, root: Optional[TreeNode]) -> int:
        return max(self.robstart(root),self.notrobstart(root))
                
    def robstart(self,root):
        if not root:
            return 0
        
        if (root,"r") in self.lib:
            return self.lib[(root,"r")]
        else:
            self.lib[(root,"r")] = root.val + self.notrobstart(root.left) + self.notrobstart(root.right)
            return self.lib[(root,"r")]
        
    def notrobstart(self,root):
        if not root:
            return 0
        if (root,"n") in self.lib:
            return self.lib[(root,"n")] 
        else:
            self.lib[(root,"n")] = max(self.robstart(root.left),self.notrobstart(root.left)) + max(self.robstart(root.right),self.notrobstart(root.right))
            return self.lib[(root,"n")]
            
 知识点：
 这也是贪心算法 而且一个函数包括rob和不rob的话会更简单 不存在call很多次 还要存一下的事情
