题目：
Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. 
If the two linked lists have no intersection at all, return null.

Follow up: Could you write a solution that runs in O(n) time and use only O(1) memory?

思路：
O(n) 时间 O(1) 空间 就只允许几个pointer

只能交换开头

1 2 3 4 5 6
      |
1  3  4  5

p1跑完了第一个就跑第二个 p2跑完了第二个就跑第一个
这样就会相遇 如果有相同点

代码：
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        p1 = headA
        p2 = headB
        
        while p1 != p2:
            if not p1:
                p1 = headB
            else:
                p1 = p1.next

            if not p2:
                p2 = headA
            else:
                p2 = p2.next
        
        return p1
        
    知识点：
    这也太tmd绕了
    看看图 思考一下啊 怎么让两个link list一样长呢
    注意细节 到了None顿一下再走 否则无法处理在开头相遇的事情
