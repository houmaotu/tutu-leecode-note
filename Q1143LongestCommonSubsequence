题目：
Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

思路：
字母一样了 那就都要
字母不一样了 要么去掉这个 要么去掉那个
这就是一个二维的dp
      a c e
   a
   b
   c
   d
   e
  从下向上写 超界限了就是0
  
 a a 这里就是 走到了bc这里
 bc就走到了 cc和be最大的
 这么一下一下的走就成了
  
代码：
class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        dp = [[0 for j in range(len(text2)+1)] for i in range(len(text1 )+ 1)]
        for i in range(len(text1)-1,-1,-1):
            for j in range(len(text2)-1,-1,-1):
                if text1[i] == text2[j]:
                    dp[i][j] = 1 + dp[i+1][j + 1]
                else:
                    dp[i][j] = max(dp[i][j+1],dp[i+1][j])
                    
        return dp[0][0]
        
  知识点：
  谁说女子不如男！
  啊不对
  谁说dp只能搞一维的！妈蛋蛋我又脑残了！
  哇呀呀呀！
            
