题目：
You are given a tree with n nodes numbered from 0 to n - 1 in the form of a parent array parent where parent[i] is the parent of the ith node. The root of the tree is node 0, so parent[0] = -1 since it has no parent. You want to design a data structure that allows users to lock, unlock, and upgrade nodes in the tree.

The data structure should support the following functions:

Lock: Locks the given node for the given user and prevents other users from locking the same node. You may only lock a node using this function if the node is unlocked.
Unlock: Unlocks the given node for the given user. You may only unlock a node using this function if it is currently locked by the same user.
Upgrade: Locks the given node for the given user and unlocks all of its descendants regardless of who locked it. You may only upgrade a node if all 3 conditions are true:
The node is unlocked,
It has at least one locked descendant (by any user), and
It does not have any locked ancestors.
Implement the LockingTree class:

LockingTree(int[] parent) initializes the data structure with the parent array.
lock(int num, int user) returns true if it is possible for the user with id user to lock the node num, or false otherwise. If it is possible, the node num will become locked by the user with id user.
unlock(int num, int user) returns true if it is possible for the user with id user to unlock the node num, or false otherwise. If it is possible, the node num will become unlocked.
upgrade(int num, int user) returns true if it is possible for the user with id user to upgrade the node num, or false otherwise. If it is possible, the node num will be upgraded.

思路：
没什么
用个tree 记录val （不必要） 前node 后node们 user和lock
用个字典方便直接访问数字对应的节点
init注意先搞出来所有节点 否则可能乱
lock unlock查一下就好了
upgrade 查前后
前面的 就这样直接插
后面的 bfs把val搞一个表出来

代码：
class tree:
    def __init__(self,val):
        self.val = val
        self.next = []
        self.prev = None
        self.lock = False
        self.user = None
class LockingTree:

    def __init__(self, parent: List[int]):
        self.root = tree(0)
        self.lib = {}
        self.lib[0] = self.root
        for i in range(1,len(parent)):
            self.lib[i] = tree(i)
        for nodenum, par in enumerate(parent[1:]):
            node = self.lib[nodenum+1]
            node.prev = self.lib[par]
            self.lib[par].next.append(node)
            self.lib[nodenum+1] = node

        
    def lock(self, num: int, user: int) -> bool:
        node = self.lib[num]
        if node.lock:
            return False
        else:
            node.lock = True
            node.user = user
            return True
        

    def unlock(self, num: int, user: int) -> bool:
        node = self.lib[num]
        if not node.lock or node.user != user:
            return False
        else:
            node.lock = False
            node.user = None
            return True
        

    def upgrade(self, num: int, user: int) -> bool:
        node = self.lib[num]
        if node.lock:
            return False
        while node.prev:
            node = node.prev
            if node.lock:
                return False
        node = self.lib[num]
        q = [node]
        dec = []
        while q:
            node = q.pop()
            if node.next:
                for nextnode in node.next:
                    dec.append(nextnode.val)
                    q.append(nextnode)
        logi = False
        for nodenum in dec:
            if self.lib[nodenum].lock:
                logi = True
                break
        if not logi:
            return False
        
        for nodenum in dec:
            if self.lib[nodenum].lock:
                self.lib[nodenum].lock = False
                self.lib[nodenum].user = None
                
        self.lib[num].lock = True
        self.lib[num].user = user
        return True
        
                
        
                
                
    
# Your LockingTree object will be instantiated and called as such:
# obj = LockingTree(parent)
# param_1 = obj.lock(num,user)
# param_2 = obj.unlock(num,user)
# param_3 = obj.upgrade(num,user)


知识点：
奥呜呜呜
这玩意自己写是真的烦人
