题目：
Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.

A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.

 思路：
 就是挨个查看 没啥

代码：
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:

        s = [root]
        while s:
            node = s.pop()
            if node.val == subRoot.val and self.checksame(node,subRoot):
                return True
            if node.left:
                s.append(node.left)
            if node.right:
                s.append(node.right)
        return False
            
                      
    def checksame(self,r1,r2):
        s1,s2 = [r1],[r2]
        while s1 and s2:
            n1,n2 = s1.pop(),s2.pop()
            if n1 is None and n2 is None:
                continue
            elif (n1 and n2 is None) or (n2 and n1 is None):
                return False
            elif n1.val != n2.val:
                return False
            else:
                s1.append(n1.left)
                s2.append(n2.left)
                s1.append(n1.right)
                s2.append(n2.right)

        return s1 == [] and s2 == []
 
 知识点：
 这玩意有点烦人
