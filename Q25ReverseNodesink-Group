题目：
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

思路：


题目O(1) 空间 就是用指针操作

 prev ->  1    -> 2 ->  3 ->4 ->5
            t       s             l   n
            n       t     s
            
                              n   t
                              
 转k个的过程 存储前一段的末尾prev 这一段目前的末尾 t从这一段的第一个数字 也就是prev的下一个开始 n存储需要建立的链接 从l的下一个开始
 存储t的下一个之后 从新建立next链接 然后继续走 直到t是l为止 此时把l链接到n即可
 在此之前需要先把prev和l连起来
 
 写出转k的方法 那么就用poiner从prev开始走k下 能走转 不能走就是到了 return

代码：
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        dummy = ListNode()
        dummy.next = head
        prev = dummy
        while True:
            l = prev
            for _ in range(k):
                if l.next is None:
                    return dummy.next
                else:
                    l = l.next

            tmp = prev.next
            self.reverse(prev,l)
            prev = tmp
            
    def reverse(self,prev,l):
        t = prev.next
        n = l.next
        prev.next = l
        while t!=l:
            s = t.next
            t.next = n
            n = t
            t = s
        t.next = n

知识点：
做题的时候关掉微信 否则大兔子能把网站直接干崩 
