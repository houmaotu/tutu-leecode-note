problem:
Given two integers a and b, return the sum of the two integers without using the operators + and -.

idea:
bitwise operation

code:
class Solution(object):
    def getSum(self, a, b):
        """
        :type a: int
        :type b: int
        :rtype: int
        """
        carry = 0
        result = 0
        mask = 1
        for i in range(32):   #start from the ith digit
            a_bit = (a >> i) & mask
            b_bit = (b >> i) & mask    #move the ith digit to the right and use and operator with 00000001 to get that dight
            res = a_bit ^ b_bit ^ carry  #xor operaction 1 if the number of 1s is odd
            carry = (a_bit&b_bit) | (a_bit&carry) | (b_bit&carry) # 1 if there are more than two 1s, so do and to check if any twos are 1, and do or to collect result
            result = result | (res << i)  #shify left i , use and do add since the dights stagger
        # Python has arbit long integers. If the last bit is 1, then we have a negative number in two's complement.
        # However, it will be treated as a positive number. Therefore, take the positive part out and remove -2**31
        # Another alternate way is to remove 2**32
        if result & 0x80000000: # 1 in bit number 32
            result = ~ (result ^ 0xFFFFFFFF)
            #   result = (result & 0x7fffffff) - 2**31
            #   result = result - 2**32 # Same thing as above
        return result   
















Bitwide operator:
x << y  shift to left y place
Returns x with the bits shifted to the left by y places (and new bits on the right-hand-side are zeros). This is the same as multiplying x by 2**y.
x >> y  shift to right y place
Returns x with the bits shifted to the right by y places. This is the same as //'ing x by 2**y.
x & y  1 if all 1
Does a "bitwise and". Each bit of the output is 1 if the corresponding bit of x AND of y is 1, otherwise it's 0.
x | y  1 if exist 1
Does a "bitwise or". Each bit of the output is 0 if the corresponding bit of x AND of y is 0, otherwise it's 1.
~ x  complement  (-x-1)
Returns the complement of x - the number you get by switching each 1 for a 0 and each 0 for a 1. This is the same as -x - 1.
x ^ y same 0, not same 1 (mutiple ignore 0, 1 if odd 1)
Does a "bitwise exclusive or". Each bit of the output is the same as the corresponding bit in x if that bit in y is 0, and it's the complement of the bit in x if that bit in y is 1.


Note:
if x and y are does not have the same length, shorter one will be padded with leading 0s

A negative number, -x, is written using the bit pattern for (x-1) with all of the bits complemented (switched from 1 to 0 or 0 to 1),
 So -1 is complement(1 - 1) = complement(0) = "11111111", and -10 is complement(10 - 1) = complement(9) = complement("00001001") = "11110110".

