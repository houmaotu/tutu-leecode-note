题目：
Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.


思路：
在递归（recurtion）的时候 记录max min




# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        def checktree(root): #return valid min max
            #print(root)
            if root == None:
                return [True, float('inf'), float('-inf')]
            
            leftres = checktree(root.left)
            rightres = checktree(root.right)
            
            if leftres[0] == True and rightres[0] == True and leftres[2] < root.val and rightres[1] > root.val:
                return [True, min(root.val,leftres[1]),max(root.val,rightres[2])]
            else:
                return [False, 0, 0]
        
    
        return checktree(root)[0]


知识点：也可以把max min摔到def里面 而不是return里面 用max min记录接下来允许的最大的和最小的数值
        
