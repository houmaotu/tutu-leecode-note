Given a string s of '(' , ')' and lowercase English characters.

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.


class Solution:
    def minRemoveToMakeValid(self, s: str) -> str:
        res = []
        stack = []
        for i, ch in enumerate(s):
            if ch == '(':
                stack.append(i)
            elif ch== ')':
                if stack:
                    stack.pop()
                else:
                    res.append(i)
        s= [ch for ch in s]
        res += stack
        res.sort()
        for i,j in enumerate(res):
            del s[j-i]      
        return "".join(s)
        
        
        
        
