题目：
Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

 思路：
 挨个走
 
 代码：
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        a = p.val
        b = q.val
        if b<a:
            a,b = b,a
        while root:
            if b < root.val:
                root = root.left
            elif a > root.val:
                root = root.right
            else:
                return root
       
 知识点：
 无 嘿嘿嘿
