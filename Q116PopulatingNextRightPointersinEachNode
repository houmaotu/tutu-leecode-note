题目：
You are given a perfect binary tree where all leaves are on the same level, and every parent has two children.

Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

思路：
法1递归：
想想清楚链接的方法：
一个节点的左右被连起来 如果一个节点next有东西 那么此节点的右和他next的左需要被连起来 

法2:stack
链接的方法是一样的
        1    
      /  \
     2    3
    / \  / \
   4  5  6  7
   
   
   [1] cur 1 处理：2-3
   [2 3] cur 2 处理：4-5 5-6 
   [3 4 5] cur 3 ....
处理方法还是链接左右 如果next存在 则链接右与next的左
   

代码：
"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""

class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if root and root.left and root.right:
            root.left.next = root.right
            if root.next:
                root.right.next = root.next.left
            self.connect(root.left)
            self.connect(root.right)
        return root
        
知识点：
做题目的时候 需要先瞪着图几分钟 找到规律就好办了 瞪着兔几小时都没用 只能看到可爱兔兔蠢蠢的又不会了
