题目：
The count-and-say sequence is a sequence of digit strings defined by the recursive formula:

countAndSay(1) = "1"
countAndSay(n) is the way you would "say" the digit string from countAndSay(n-1), which is then converted into a different digit string.
To determine how you "say" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.


Given a positive integer n, return the nth term of the count-and-say sequence.

思路：
递归 



代码：

class Solution:
    def countAndSay(self, n: int) -> str:
        if n == 1:
            return str(1)
        res = ''
        num = self.countAndSay(n - 1)
        ct = 1
        i = 0
        while i < len(num):
        
            if  i == len(num) - 1 or num[i] != num[i + 1]:
                res = res + str(ct) + str(num[i])
                i += 1  
                ct = 1
            else :
                i += 1
                ct += 1
        return res
    
    知识点：嗯 我能想到咧~ 不存在反复调用需要存一下的事情诶

lass Solution:
    """
    @param n: the nth
    @return: the nth sequence
    """
    def count_and_say(self, n: int) -> str:
        # write your code here
        if n == 1:
            return '1'
        res = '1'
        for _ in range(n-1):
            res = self.count_and_say_once(res)
        return res

    def count_and_say_once(self,s):
        res = ""
        i = 0
        while i < len(s):
            ct = 1
            while i+1 < len(s) and s[i] == s[i+1]:
                i += 1
                ct += 1
            res += str(ct)
            res += s[i]

            i+= 1
        return res
