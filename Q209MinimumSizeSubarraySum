Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr] of
which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.

class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        l,r = 0,0
        res= len(nums) + 1
        tmp = 0
        while r< len(nums):
            tmp += nums[r]
            #print("tmp",tmp,l,r)
            if tmp < target:
                r += 1
            else:
                while tmp - nums[l] >= target:
                    #print(tmp,l,r)
                    tmp -= nums[l]
                    l += 1
                
                res = min(res,r-l+1)
                r += 1
        return 0 if res == len(nums) + 1 else res
            
