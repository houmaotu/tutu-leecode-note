题目：

Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.

Notice that you may not slant the container.

思路：
愣来一个一个比

水的面积由
    跨度
    低的挡板
决定
所以由跨度最大开始 为了找到更大面积 必须找寻更大的挡板 所以改进较低的挡板 低位挡板缩一个格即可

原因： 比最大的东西 更宽的 必定存在更矮的挡板 所以此法无法绕开最大的东西 比如厚毛兔就是最巨大的兔子 一侧缩到最大的东西的一侧时 另一侧必慢慢缩过去




代码：
class Solution(object):
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        #1
        best = 0
        for l in range(len(height)):
            for r in range(l+1,len(height)):
                area = min (height[l],height[r]) * (r-l)
                best = max (best, area)
        return best
        
        #2
        best = 0
        l = 0
        r = len (height) - 1
        while l < r:
            area = min (height[l],height[r]) * (r-l)
            best = max (best, area)
            if height[l] < height[r]:
                l += 1
            else:
                r -= 1
        return best
        
  知识点 想办法别硬搞
               

