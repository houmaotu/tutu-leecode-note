Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants 
(where we allow a node to be a descendant of itself).

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        s1,s2 = '',''
        stack = [(root,'0')]
        while stack:
            node,s = stack.pop()
            if node.val == p.val:
                s1 = s
            if node.val == q.val:
                s2 = s
                
            if s1 and s2:
                break
            
            if node.left:
                stack.append((node.left,s+"l"))
            if node.right:
                stack.append((node.right,s+"r"))
        i = 1
        while i < min(len(s1),len(s2)):
            if  s1[i]!= s2[i]:
                break
            elif s1[i]=="l":
                root = root.left
            else:
                root = root.right
            i += 1
            
        return root
        
  其他神奇方法：
  找到了就返回 找到的
  找不到就返回NULL
  
  找到的东西：
  左右都有东西 就返回自己
  左边没货 右边有东西 返回右边的东西
  class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if not root:
            return None
        if root == p or root == q:
            return root
        
        #divide find  return node
        #       not find return None
        left = self.lowestCommonAncestor(root.left,p,q)
        right = self.lowestCommonAncestor(root.right,p,q)
        
        #counk
        if left and right:
            return root
        if not left:
            return right
        if not right:
            return left
