题目：
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 


思路：
二分法 和上一个题目一样滴




代码：
class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        n = len(nums)
        if n == 1:
            if nums[0] == target:
                return [0,0]
            else:
                return [-1,-1]
            
        l, r = 0, n-1
        while l <= r:
            mid = (l + r) // 2
            #print([l,r,mid])
            if nums[mid] == target:
  
               #left search
                ll = l
                lr = mid
                while ll < lr - 1:
                    lmid = (ll + lr) // 2
                    if nums[lmid] < target:
                        ll = lmid
                    else:
                        lr = lmid
                if nums[ll] == target:
                    l = ll
                else:
                    l = lr

                rl = mid
                rr = r
                while rl < rr - 1:
                    rmid = (rl + rr) // 2
                    if nums[rmid] > target:
                        rr = rmid
                    else:
                        rl = rmid
                if nums[rr] == target:
                    r = rr
                else:
                    r = rl
                print([l,r])
                return ([l,r])
                
            elif nums[mid] > target:
                r = mid - 1
            
            else:
                l = mid + 1
        return [-1, -1]
        
注意：corner case
