题目：
Design a HashMap without using any built-in hash table libraries.

Implement the MyHashMap class:

MyHashMap() initializes the object with an empty map.
void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.
int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.

思路：

open hashing

[_ _ _ _ _ _ _]
[_ _ _ _ _ _ _]
[_ _ _ _ _ _ _]
[_ _ _ _ _ _ _]
[_ _ _ _ _ _ _]
[_ _ _ _ _ _ _]

代码：
class MyHashMap:

    def __init__(self):
        
        self.key_space = 2069
        self.hash_table = [[] for _ in range(self.key_space)]
        

    def put(self, key: int, value: int) -> None:
        
        hash_key = key % self.key_space
        found = False
        
        for i, kv in enumerate(self.hash_table[hash_key]):
            if key == kv[0]:
                self.hash_table[hash_key][i] = (key,value)
                found = True
                break
            
        if not found:
            self.hash_table[hash_key].append((key,value))

    def get(self, key: int) -> int:
        
        hash_key = key % self.key_space
        for (k,v) in self.hash_table[hash_key]:
            if k == key:
                return v
        return -1
                
    
    def remove(self, key: int) -> None:
        hash_key = key % self.key_space
        for i, kv in enumerate(self.hash_table[hash_key]):
            if key == kv[0]:
                del self.hash_table[hash_key][i]
        


# Your MyHashMap object will be instantiated and called as such:
# obj = MyHashMap()
# obj.put(key,value)
# param_2 = obj.get(key)
# obj.remove(key)


知识点：
什么鬼怪
