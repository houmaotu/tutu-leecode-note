Question:Implement the RandomizedSet class:

RandomizedSet() Initializes the RandomizedSet object.
bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.
bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.
int getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.
You must implement the functions of the class such that each function works in average O(1) time complexity.

idea:
hashmap can be added or deleted or checked in O(1), but cannot creat random draw
array(list) can be added or random drawed in 0(1), but can not delete a specific element in O(1), but the last element can be poped in O(1)
to we can use hashmap plus array, hashmap recored the index of the value in array
to add or random draw is easy
to delete, we can use hashmap to locate the indixes of the element, and then we swap this element with the last one and pop, this we deleted the element in O(1)



code:
class RandomizedSet:

    def __init__(self):
        self.lib = {}
        self.arr = []
        

    def insert(self, val: int) -> bool:
        
        if val not in self.lib:
            self.lib[val] = len(self.arr)
            self.arr.append(val)
            return True
        else:
            return False
        

    def remove(self, val: int) -> bool:
        if val in self.lib:
            lastele = self.arr[-1] 
            
            valindex = self.lib[val]
            
            self.arr[-1], self.arr[valindex] = self.arr[valindex], self.arr[-1]
            
            self.lib[lastele] = valindex
            self.arr.pop()
            del self.lib[val]
            return True
        else:
            return False
        

    def getRandom(self) -> int:
        return choice(self.arr)
        
        
   comments:
   check orginal documents, or mistakes can be made.
