题目：
Note: This is a companion problem to the System Design problem: Design TinyURL.
TinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk. Design a class to encode a URL and decode a tiny URL.

There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.

Implement the Solution class:

Solution() Initializes the object of the system.
String encode(String longUrl) Returns a tiny URL for the given longUrl.
String decode(String shortUrl) Returns the original long URL for the given shortUrl. It is guaranteed that the given shortUrl was encoded by the same object.

思路：
lib url ->tiny
    tiny -> url
    
tiny: letters a A numbers（注意background定义）一共62个

代码：
import string
import random
import math

class Codec:
    def __init__(self):
        self.fulltotiny = {}
        self.tinytofull = {}
        self.letters = string.ascii_letters + string.digits

    def encode(self, longUrl: str) -> str:
        """Encodes a URL to a shortened URL.
        """
        def short_add():
            ans = ""
            tmp = ""
            for i in range(6):
                tmp = self.letters[random.randint(0,61)]
                ans += tmp
            return ans
        
    
        if longUrl in self.fulltotiny:
            return "http://tinyurl.com/" + fulltotiny[longUrl]
        else:
            suffix = short_add()
            self.fulltotiny[longUrl] = suffix
            self.tinytofull[suffix] = longUrl
            return "http://tinyurl.com/" + suffix
            
        

    def decode(self, shortUrl: str) -> str:
        """Decodes a shortened URL to its original URL.
        """
        shortUrl = shortUrl.split("/")[-1]
        return self.tinytofull.get(shortUrl)
        
        
  知识点：
  注意import
