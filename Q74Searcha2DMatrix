题目：
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.

思路：
二分法 binary search 两次

代码：
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        n = len(matrix)
        m = len(matrix[0])
        
        t = 0
        b = n - 1
        while t <= b:
            #print(t,b)
            mid = (t + b) // 2
            if target > matrix[mid][-1]:
                t = mid + 1
            elif target < matrix[mid][0]:
                b = mid - 1
            else:
                break
                
        if not t <= b:
            return False
        
        row = (t + b) // 2
        
        
        l = 0
        r = m - 1
        
        while l <= r:
            #print(l,r)
            mid = (l + r) //2
            if target > matrix[row][mid]:
                l = mid + 1
            elif target < matrix[row][mid]:
                r = mid - 1
            else:
                return True
        return False
                
        
        
    知识点：
    闭区间二分法搜索效率更高 不需要很多奇怪的判断

