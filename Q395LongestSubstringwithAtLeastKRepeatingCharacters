题目：

Given a string s and an integer k, 
return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.

思路：
s a b a b a b c a b a b a b a b d d c e   ...
问题：
第一个s要不要 取决于后面能见到不 见到几个 比较麻烦
问题的主要原因是字母数量不定
所以定了数量 然后sliding window 会简单

先拿到有几个 直接l r去滑动 
记录字母数量 够k的字母数量 直接l r去滑动
r一个一个滑
l在数量超了的时候滑

记录字母数量 够k的字母数量



代码：
class Solution:
    def longestSubstring(self, s: str, k: int) -> int:
        if k == 0 or k == 1:
            return len(s)
        
        longest = 0
        max_unique = len(set(s))
        
        for unique in range(1,max_unique + 1):
            counter = collections.Counter()
            l = 0
            cur_unique = 0
            constraint = 0
            
            for r in range(len(s)):
                counter[s[r]] += 1
                
                if counter[s[r]] == 1:
                    cur_unique += 1
                    
                if counter[s[r]] == k:
                    constraint += 1
                    
                if constraint == unique and cur_unique == unique:
                    longest = max(r - l + 1, longest)
                    
                while l < r and cur_unique > unique:
                    counter[s[l]] -= 1
                    if counter[s[l]] == 0:
                        cur_unique -= 1
                        
                    if counter[s[l]] == k - 1:
                        constraint -= 1
                        
                    l += 1
                    
        return longest
        
 知识点：
 不要太贪心
 想不到好方法不是因为兔兔弱鸡
 是因为根本就不存在
