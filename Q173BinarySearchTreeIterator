题目：
Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):

BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.
boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.
int next() Moves the pointer to the right, then returns the number at the pointer.
Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.

You may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.

思路：
用stack记录路径 O(h) memory 已经是很好的提示了


代码：
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class BSTIterator:

    def __init__(self, root: Optional[TreeNode]):
        self.stack = []
        cur = root
        while cur is not None:
            self.stack.append(cur)
            cur = cur.left
        

    def next(self) -> int:
        cur = self.stack.pop()
        val = cur.val
        cur = cur.right
        while cur is not None:
            self.stack.append(cur)
            cur = cur.left
        return val
        
        

    def hasNext(self) -> bool:
        return len(self.stack) != 0
    
            


# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()

知识点：
厚毛兔怀疑兔兔自己才是可知网速的罪魁祸兔
