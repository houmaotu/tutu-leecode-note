题目：
Given a string s, find two disjoint palindromic subsequences of s such that the product of their lengths is maximized. The two subsequences are disjoint if they do not both pick a character at the same index.

Return the maximum possible product of the lengths of the two palindromic subsequences.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. A string is palindromic if it reads the same forward and backward.

思路：
玩楞的！

代码：

class Solution:
    def maxProduct(self, s: str) -> int:
        n = len(s)
        pali = {} #bitmask : lenth
        
        for mask in range(1, 1 << n):
            subseq = ''
            for i in range(n):
                if mask & (1<<i):
                    subseq += s[i]  
                    #mask 0s 1s 0 for not in subseq 1 for subset
                    # i do we keep the 1 th position (1<<i):100000000
                    # mask & (1<<i) == 1 means that the ith (from left) is 1
                if subseq == subseq[::-1]:
                    pali[mask] = len(subseq)
        
        res = 0
        for m1 in pali:
            for m2 in pali:
                if m1 & m2 == 0:
                    res = max(res,pali[m1]*pali[m2])
                    
        return res
        
   知识点：
   就算二进制运算省点事 tm这也是个楞的！
                
