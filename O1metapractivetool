String 1 Rotational Cipher 

import math
import string
# Add any extra import statements you may need here


# Add any helper functions you may need here


def rotationalCipher(input, rotation_factor):
  # Write your code here
  l1 = 'abcdefghijklmnopqrstuvwxyz'
  lib1,lib2 = {},{}
  for i,ch in enumerate(l1):
    lib1[i] = ch
    lib2[ch] = i
  #print(lib1)
  #print(lib2)
  res = ''
  for ch in input:
    if ch.islower():
      key = (lib2[ch]++rotation_factor)%26
      res += lib1[key]
    elif ch.isupper():
      key = (lib2[ch.lower()]++rotation_factor)%26
      res += lib1[key].upper()
    elif ch.isdigit():
      res += str ((int(ch)+rotation_factor)%10)
    else:
      res += ch
  return res
  
  Array 3
  Contiguous Subarrays where n is the max and the start/end
  import math
# Add any extra import statements you may need here


# Add any helper functions you may need here


def count_subarrays(arr):
  # Write your code here
  n = len(arr)
  if n == 1:
    return [1]
  stop,start =  [1] *n, [1] * n
  for i in range(1,n):
    j = i-1
    while j>=0 and arr[j]<arr[i]:
      j -= 1
    stop[i] += (i-j-1)
  for i in range(n-2,-1,-1):
    j = i+1
    while j<=n-1 and arr[j]<arr[i]:
      j += 1
    start[i] += (j-i-1)
  return[start[i] + stop[i] - 1 for i in range(n)]
  
Hash 1 Pair Sums


def numberOfWays(arr, k):
   # Write your code here
    c = collections.Counter(arr)
    res = 0
    ##print(arr)
    #print(c)
    for num in c:
      if 2 * num == k:
        res += c[num] * (c[num]-1)
      else:
        res += c[num] * c[k - num]
        #print(num,res)
    return res//2
    
    Reverse to Make Equal
    
    
Array 1    Reverse to Make Equal
def are_they_equal(array_a, array_b):
  # Write your code here
  n = len(array_a)
  l,r = 0, n-1
  while l<=n-1 and array_a[l]==array_b[l]:
    l+=1  #l-1 same l not
  if l==n:
    return True
  while r>=0 and array_a[r]==array_b[r]:
    r-= 1 #r+! same r not
  #print(array_a)
  #print(array_b)
  #print(l,r)
  return array_a[l:(r+1)] == array_b[r:(l-1):-1]
  
     
Array 2    Passing Yearbooks

def findSignatureCounts(arr):
  # Write your code here
  n = len(arr)
  res = [None] * n
  for i in range(n):
    if res is not None:
      ct = 1
      s= i+1
      c = i+1
      index = set([c])
      while arr[c - 1] != s:
        ct += 1
        c = arr[c - 1]
        index.add(c)
      for ind in index:
        res[ind-1] = ct
  return res
  
  heap 1 Largest Triple Products
  def findMaxProduct(arr):
  # Write your code here
    n = len(arr)
    if n <= 2:
        return [-1]* n
    if n == 3:
        return [-1,-1,arr[0]*arr[1]*arr[2]]
    res = [-1]* n
    res[2] = arr[0]*arr[1]*arr[2]
    Heap = arr[0:3]
    heapq.heapify(Heap)
    for i in range(3,n):
        if Heap[0] < arr[i]:
            heapq.heappop(Heap)
            heapq.heappush(Heap,arr[i])
        res[i] = Heap[0]* Heap[1] * Heap[2]

    return res
    
 Heap 2 Magical Candy Bags
 
 def maxCandies(arr, k):
  # Write your code here
    Heap = [-arr[i] for i in range(len(arr))]
    heapq.heapify(Heap)
    res = 0
    for _ in range(k):
        num = -heapq.heappop(Heap)
        res += num
        heapq.heappush(Heap,-(num//2))
    return res
    
    Heap  3 Median Stream
    
    def findMedian(arr):
    m = []
    n = len(arr)
    res = [None] * n
    for i in range(n):
        m.append(arr[i])
        m.sort()
        if len(m) <=2:
            res[i] = (m[0]+m[-1])//2
        elif len(m) == 3:
            res[i] = m[1]
        else:
            res[i] = (m[1]+m[2])//2
            m = m[1:3]
                        
    return res
    
    String 2: Matching Pairs fk those edge cases
def matching_pairs(s, t):
  # Write your code here
    n = len(s)
    if s == t:
        return n-2 if len(set(s)) == len(s) else n       
    ct = 0
    misses,pairs = set(),set()
    for si,ti in zip(s,t):
        if si == ti:
            pairs.add((si,True))
            ct += 1
        else:
            misses.add((si,ti))
            pairs.add((si,False))
    for m in misses:
        if (m[1],m[0]) in misses:
            return ct+2
    for m in misses:
        if (m[1],False) in pairs:
            return ct+1
    for m in misses:
        if (m[1], True) in pairs: 
            return ct
    if len(set(s)) == len(s):
        return ct
    if len(misses) >= 2:
        return ct
    if len(misses) == 1:
        return ct
    return ct - 2
  
string 2 Minimum Length Substrings

def min_length_substring(s, t):
  # Write your code here
    c = collections.Counter(t)
    ct,n = len(c),len(s)
    l,r = 0,0
    res = n+1
    while r<n:
        if s[r] in c:
            c[s[r]] -= 1
            if c[s[r]] == 0:
                ct -= 1
            if ct >0:
                r+=1
            else:
                while s[l] not in c or c[s[l]]<0:
                    if s[l] in c:
                        s[s[l]] += 1
                    l += 1
                res = min(res,r-l+1)
                r+=1
        else:
            r+=1
    return res if ct == 0 else -1
    
 greedy 1
 Slow Sums
 def getTotalTime(arr):
    if len(arr) == 1:
        return 0
    arr.sort()
    res = 0
    for i,num in enumerate(arr):
        res += num * (i+1)
    res -= arr[-1]
    return res
    
 greedy 2 Element Swapping
 def findMinArray(arr, k):
    if len(arr) == 1 or k==0:
        return arr

    tmp,inx = arr[0],0
    n = len(arr)
    for i in range(min(k+1,n)):
        if arr[i]<tmp:
            tmp = arr[i]
            inx = i
    num = arr.pop(inx)
    return [num] + findMinArray(arr, k - inx)

 
 greedy 3 Seating Arrangements
def minOverallAwkwardness(arr):
  # Write your code here
    arr.sort()
    n = len(arr)    
    if n == 1:
        return 0
    if n == 2:
        return abs(arr[1]-arr[0])
    sm = 0
    for i in range(n-2):
        sm = max(sm,arr[i+2]- arr[i] )
    return sm
    
   tree 1 Number of Visible Nodes
   
   def visible_nodes(root):
  # Write your code here
    if not root:
        return 0
    q = deque([(root,1)])
    while q:
        node,lv = q.popleft()
        if node.left:
            q.append((node.left,lv+1))
        if node.right:
            q.append((node.right,lv+1))
    return lv

tree 2
Nodes in a Subtree
def count_of_nodes(root, queries, s):
    num2node = {}
    q = [root]
    while q:
        node = q.pop()
        num2node[node.val] = node      
        for child in node.children:
            q.append(child)
    
    def count(num,ch):
        q = [num2node[num]]
        ct = 0
        while q:
            node=q.pop()
            if s[node.val-1] == ch:
                ct += 1
            for child in node.children:
                q.append(child)
        return ct
                
    return [count(num,ch) for num,ch in queries]
    
    
search 1 
Revenue Milestones


def getMilestoneDays(revenues, milestones):
  # Write your code here
    smilestones = sorted(milestones)
    index = [smilestones.index(_) for _ in milestones]
    res = []
    i,j = 0,0
    cumsum = 0
    while i< len(revenues) and j<len(smilestones):
        cumsum += revenues[i]
        while j<len(smilestones) and cumsum >= smilestones[j]:
            j+=1
            res.append(i+1)
        i+=1
    return [res[i] for i in index] if res else [-1]
    
  search 2 Billion Users
  
  def getBillionUsersDay(growthRates):
  # Write your code here
    n = len(growthRates)
    goal = 1000000000
    p = 0
    cur = [1] * n
    rate, k = growthRates, 1
    while sum(cur) < goal:
        if sum( [c * r for c,r in zip(cur,rate)]) > goal:
            rate, k = growthRates, 1          
        while sum( [c * r * r for c,r in zip(cur,rate)]) < goal:
            rate = [r*r for r in rate]
            k *= 2
        cur = [c * r for c,r in zip(cur,rate)]
        p += k
    return p
    
  recursion 1 Encrypted Words
  
  def findEncryptedWord(s):
  # Write your code here
    if len(s) <= 1:
        return s
    index = (len(s)-1)//2
    return s[index] + findEncryptedWord(s[:index]) + findEncryptedWord(s[index+1:])
    
   recursion 2 Change in a Foreign Currency
   
   def canGetExactChange(targetMoney, denominations):
  # Write your code here
    dp = [True] + [False] * targetMoney
    for t in range(1,len(dp)):
        for d in denominations:
            if t-d >=0 and dp[t-d]:
                dp[t] = True
                break
    return dp[-1]
    
  sort 1 Balanced Split
  
  def balancedSplitExists(arr):
  # Write your code here
    s = sum(arr)
    if s%2==1:
        return False
    arr.sort()
    cm = 0
    i = 0
    while cm + arr[i] <= s//2:
        cm += arr[i]
        i += 1
    i-= 1
    if cm != s//2 or arr[i] == arr[i+1]:
        return False
    return True
    
 sort 2 Counting Triangles
 def countDistinctTriangles(arr):
    ls = [tuple(sorted(t)) for t in arr]
    
    #print(ls)
    return len(set(ls))
    
 stack 1
    
  
  
        
