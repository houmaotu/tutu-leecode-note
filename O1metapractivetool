String P1 Rotational Cipher 

import math
import string
# Add any extra import statements you may need here


# Add any helper functions you may need here


def rotationalCipher(input, rotation_factor):
  # Write your code here
  l1 = 'abcdefghijklmnopqrstuvwxyz'
  lib1,lib2 = {},{}
  for i,ch in enumerate(l1):
    lib1[i] = ch
    lib2[ch] = i
  #print(lib1)
  #print(lib2)
  res = ''
  for ch in input:
    if ch.islower():
      key = (lib2[ch]++rotation_factor)%26
      res += lib1[key]
    elif ch.isupper():
      key = (lib2[ch.lower()]++rotation_factor)%26
      res += lib1[key].upper()
    elif ch.isdigit():
      res += str ((int(ch)+rotation_factor)%10)
    else:
      res += ch
  return res
  
  String Q2
  Contiguous Subarrays where n is the max and the start/end
  import math
# Add any extra import statements you may need here


# Add any helper functions you may need here


def count_subarrays(arr):
  # Write your code here
  n = len(arr)
  if n == 1:
    return [1]
  stop,start =  [1] *n, [1] * n
  for i in range(1,n):
    j = i-1
    while j>=0 and arr[j]<arr[i]:
      j -= 1
    stop[i] += (i-j-1)
  for i in range(n-2,-1,-1):
    j = i+1
    while j<=n-1 and arr[j]<arr[i]:
      j += 1
    start[i] += (j-i-1)
  return[start[i] + stop[i] - 1 for i in range(n)]
  




  
