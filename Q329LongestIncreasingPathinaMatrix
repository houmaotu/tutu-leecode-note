Given an m x n integers matrix, return the length of the longest increasing path in matrix.

From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).

 


class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        m,n = len(matrix),len(matrix[0])
        lib = {}
        def inbound(i,j):
            return 0<=i<m and 0<=j<n
        def dfs(i,j):
            if (i,j) in lib:
                return lib[(i,j)]
            tmp = 0
            for nexti,nextj in [[i+1,j],[i,j+1],[i-1,j],[i,j-1]]:
                if inbound(nexti,nextj) and matrix[nexti][nextj] > matrix[i][j]:
                    tmp = max(tmp,dfs(nexti,nextj))
            tmp += 1
            lib[(i,j)] = tmp
            return tmp
        
        res = 0
        for i in range(m):
            for j in range(n):
                res = max(res,dfs(i,j))
                
        return res
        
