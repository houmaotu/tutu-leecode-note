题目：
A sequence x1, x2, ..., xn is Fibonacci-like if:

n >= 3
xi + xi+1 == xi+2 for all i + 2 <= n
Given a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr. If one does not exist, return 0.

A subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].

思路：
三loop找吧

代码：
class Solution:
    def lenLongestFibSubseq(self, arr: List[int]) -> int:
        
        s = set(arr)
        n = len(arr)
        res = 0
        
        for i in range(n-1):
            for j in range(i+1,n):
                a, b = arr[i],arr[j]
                ct = 2
                while a+b in s:
                    a, b = b, a +b
                    ct += 1
                res = max(res,ct)
                
        return res if res > 2 else 0
        
   知识点：
   想不到就完楞的
