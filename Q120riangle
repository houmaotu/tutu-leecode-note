题目：
Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, 
if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.

思路：
存储到这个点的最小的数字 然后收

代码：
class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        for j in range(1,len(triangle)):
            for i in range(1,j):
                triangle[j][i] += min(triangle[j-1][i-1],triangle[j-1][i])
            triangle[j][0] += triangle[j-1][0] 
            triangle[j][j] += triangle[j-1][j-1]
        return min(triangle[-1])
        
知识点：
从上向下收和从下向上收都行 下向上收不用检查很多的edge case
这个题目的思路都差不多的 但是厚毛兔的程序非常厉害 在速度上打败了8%的submission 这就说明了某大兔子克制一切电脑越来越厉害了 连程序的运行速度都逃不过魔爪
            
