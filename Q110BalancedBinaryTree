题目：
Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

 思路：
 用递归叫高度 用-1纪录不符合的情况


代码：
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        return self.balanceheight(root) != -1
        
    def balanceheight(self,root):
        if root is None:
            return 0
        lheight = self.balanceheight(root.left)
        rheight = self.balanceheight(root.right)
        
        if lheight == -1 or rheight == -1 or abs(rheight-lheight)> 1:
            return -1
        return max(lheight,rheight) + 1
        
  知识点：
  用不在定义域的数值记录特殊情形 就不需要定义两个返回值了
