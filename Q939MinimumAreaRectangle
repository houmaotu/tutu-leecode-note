You are given an array of points in the X-Y plane points where points[i] = [xi, yi].

Return the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes. If there is not any such rectangle, return 0.

对角决定

class Solution:
    def minAreaRect(self, points: List[List[int]]) -> int:

        #TC: O(N^2)
        #SC: O(N^2)
        #N number of total points, N = len(N)
        #Each rectangle is determined by 2 points.
        #Through loop through every two points and use these two points to determine coordinates of other two points


        n = len(points)
        res = sys.maxsize

        Set = set()
        for x,y in points:
            Set.add((x,y))                 

        for x1,y1 in points:
            for x2,y2 in points:

                if x1 > x2 and y1 > y2:

                    if (x1,y2) in Set and (x2,y1) in Set:
                        area = abs(y1-y2) * abs(x1-x2)
                        res = min(res, area)

        if res == sys.maxsize:
            return 0
        else:
            return res

不限制边必须和平行坐标轴
想来想去还是用长方形的性质，不过很显然仍然是和对象线有关的性质：

长方形的两条对角线长度相等；
长方形的两条对角线互相平分（中点重合）；
注意，如果满足上面两个条件的四边形就是长方形。

用上了这两个性质之后，题目从点的处理直接变成了线段的处理，时间复杂度降到了O(N^2).

具体做法是，我们求出任意两个点构成的线段的长度（的平方）、线段的中心坐标，然后用字典保存成（长度，中心点x，中心点y）：[(线段1起点，线段1终点)， (线段2起点，线段2终点)……]。把这个字典弄好了之后，我们需要对字典做一次遍历，依次遍历相同长度和中心点的两个线段构成的长方形的面积，保留最小值就好了。

知道两条对角线坐标，求长方形的面积，方法是找两条临边，然后相乘即可。
