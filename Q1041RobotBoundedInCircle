题目：
On an infinite plane, a robot initially stands at (0, 0) and faces north. The robot can receive one of three instructions:

"G": go straight 1 unit;
"L": turn 90 degrees to the left;
"R": turn 90 degrees to the right.
The robot performs the instructions given in order, and repeats them forever.

Return true if and only if there exists a circle in the plane such that the robot never leaves the circle.

思路：
就是跟着走
因为反反复复的走 能回去就是不超上了或者直接回了


代码：
class Solution:
    def isRobotBounded(self, instructions: str) -> bool:
        
        x = 0
        y = 0
        direction = "U"
        
        def changedirection(direction,turn):
            if turn == "L":
                if direction == "U":
                    return "L"
                if direction == "L":
                    return "D"
                if direction == "D":
                    return "R"
                if direction == "R":
                    return "U"
                
            if turn == "R":
                if direction == "U":
                    return "R"
                if direction == "L":
                    return "U"
                if direction == "D":
                    return "L"
                if direction == "R":
                    return "D"
                
        
        def go(direction,x,y):
            if direction == "U":
                y += 1
            if direction == "L":
                x -= 1
            if direction == "D":
                y -= 1
            if direction == "R":
                x += 1
                
            return x,y
                

        
        for c in instructions:
            #print(c,direction,(x,y))
            if c in "LR":
                direction = changedirection(direction,c)
            else:
                x,y = go(direction,x,y)
                
        
        return (x==0 and y==0) or direction != "U"
        
  知识点：
  厚毛兔一定要注意审题！
