题目：

You are given an array of strings arr. A string s is formed by the concatenation of a subsequence of arr that has unique characters.

Return the maximum possible length of s.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 思路：
 没办法 每个位置 加不加吧！
 
代码：
class Solution:
    def maxLength(self, arr: List[str]) -> int:
        n = len(arr)
        #res = 0
        def backtrack(tmp,i):
            #print(i,tmp)
            if i==n:
                return len(tmp)
            sub = arr[i]
            #print(i,tmp,sub)
            if len(sub)  != len(set(sub)):
                return backtrack(tmp,i+1)
            ap = True
            for ch in sub:
                if ch in tmp:
                    #print(ch)
                    ap = False
                    break
            #print(ap)
            if not ap:
                return backtrack(tmp,i+1)
            else:
                return max(backtrack(tmp+sub,i+1), backtrack(tmp,i+1))
            
        return backtrack('',0)
                
知识点：
注意恶心的corner case 比如这个直接就是aa很干脆地不成 又玩奇怪的东西！
