题目：
You are given two strings s and p where p is a subsequence of s. You are also given a distinct 0-indexed integer array removable containing a subset of indices of s (s is also 0-indexed).

You want to choose an integer k (0 <= k <= removable.length) such that, after removing k characters from s using the first k indices in removable, p is still a subsequence of s. More formally, you will mark the character at s[removable[i]] for each 0 <= i < k, then remove all marked characters and check if p is still a subsequence.

Return the maximum k you can choose such that p is still a subsequence of s after the removals.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

思路：
因为限定了removable只要搞前几个 所以就简单了 binary search就好了

代码：
class Solution:
    def maximumRemovals(self, s: str, p: str, removable: List[int]) -> int:

        def issubseq(s,subseq):
            i1, i2 = 0,0
            while i1<len(s) and i2<len(subseq):
                if i1 in removed or s[i1] != subseq[i2]:
                    i1 += 1
                    continue
                i1 += 1
                i2 += 1                
            return i2 == len(subseq)
        

        res = 0
        l, r = 0, len(removable) - 1
        while l <= r:
            mid = (l + r) // 2
            
            removed = set(removable[:mid+1])
            
            if issubseq(s, p):
                res = max(res,mid + 1)
                l = mid + 1
            else:
                r = mid - 1
        
        return res

知识点：
兔兔要稍微清醒一点！！！！
不要看人家视频说divided by 2， 我就tm听成了r……这tm英文和数字还能谐音的！可恶！
