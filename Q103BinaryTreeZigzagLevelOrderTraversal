题目：
Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. 
(i.e., from left to right, then right to left for the next level and alternate between).

思路：
用一个先进先出的list （通过pop0）实现 并且记录

也可以像bfs一样用helper

代码：
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        q = [(root , 1)]
        res = []
        
        if not root:
            return res
        
        while q != []:
            node, level = q.pop(0)
            if node.left != None:
                q.append((node.left, level + 1))
            if node.right != None:
                q.append((node.right, level + 1))
                
            if level == len(res):
                res[level - 1].append(node.val)
            else:
                res.append([node.val])
        
        for i in range(len(res)):
            if i%2  == 1:
                res[i] = res[i][::-1]
        
        return res
        
 法二：
 # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        res = []
        self.dfs(root,0,res)
        return res
    
    def dfs(self,node, level ,res):
        if node == None:
            return
        if level >= len(res):
            res.append([])
        
        if level%2 == 0:
            res[level].append(node.val)
        else:
            res[level].insert(0,node.val)
            
        self.dfs(node.left, level + 1 ,res)
        self.dfs(node.right, level + 1,res)
        
知识点：
array.insert(index,value)实现在index位前插入数值 可以达成zigzag 从而无需倒置
pop(0) 实现先进先出的stack
