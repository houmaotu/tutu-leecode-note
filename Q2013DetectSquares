题目：
You are given a stream of points on the X-Y plane. Design an algorithm that:

Adds new points from the stream into a data structure. Duplicate points are allowed and should be treated as different points.
Given a query point, counts the number of ways to choose three points from the data structure such that the three points and the query point form an axis-aligned square with positive area.
An axis-aligned square is a square whose edges are all the same length and are either parallel or perpendicular to the x-axis and y-axis.

Implement the DetectSquares class:

DetectSquares() Initializes the object with an empty data structure.
void add(int[] point) Adds a new point point = [x, y] to the data structure.
int count(int[] point) Counts the number of ways to form axis-aligned squares with point point = [x, y] as described above.

思路：
玩楞的？？

代码：
class DetectSquares:

    def __init__(self):
        self.lib = {} # x: [y1,y2,]
  
        

    def add(self, point: List[int]) -> None:
        x,y = point
        if x not in self.lib:
            self.lib[x] = [y]
        else:
            self.lib[x].append(y)
        

    def count(self, point: List[int]) -> int:
        x,y = point
        if x not in self.lib:
            return 0
        res = 0
        for yi in self.lib[x]:
            lenth = abs(y-yi)
            #print(lenth)
            if lenth:
                if x + lenth in self.lib:
                    #print('+')
                    c1,c2 = 0,0
                    for yj in self.lib[x + lenth]:
                        if yj == y:
                            c1 += 1
                        if yj == yi:
                            c2 += 1
                    res += c1*c2
                            
                if x - lenth in self.lib:
                    #print('-')
                    #print(y,yi)
                    #print(self.lib[x - lenth])
                    c1,c2 = 0,0
                    for yj in self.lib[x - lenth]:                       
                        if yj == y:
                            c1 += 1
                        if yj == yi:
                            c2 += 1
                    res += c1*c2
        return res
            
        


# Your DetectSquares object will be instantiated and called as such:
# obj = DetectSquares()
# obj.add(point)
# param_2 = obj.count(point)


知识点：
看复杂度我是没问题的 但是怎么tm这么慢的 和我视频那个家伙出来挨揍！
