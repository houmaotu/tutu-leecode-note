题目：
Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.

In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.

The canonical path should have the following format:

The path starts with a single slash '/'.
Any two directories are separated by a single slash '/'.
The path does not end with a trailing '/'.
The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')
Return the simplified canonical path.

思路：
知识点 题目又臭又长 所以需要翻译下 什叫他妈的惊喜！

/ 开头
/.没用
/有东西  向下
/.. 向上
后面没有/

用list 方便增减

代码：
class Solution:
    def simplifyPath(self, path: str) -> str:
        res = []
        path_list = path.split('/')
        for p in path_list:
            if p:
                if p == '..':
                    if res:
                        res.pop()
                elif p =='.':
                    continue
                else:
                    res.append(p)
        return '/' + '/'.join(res)
        
 知识点：split还有这个函数 哇
