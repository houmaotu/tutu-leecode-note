题目：
There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

思路：
二分法 会有 O(log n) 的复杂度
假设有这样子的
       7
    6
  5
4
                 3
              2 
           1     

l       m        r 
m要么左要么右至少一侧是单调的

判断是否但单调的里面 更新 l或者r

代码：

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        n = len(nums)
        l = 0
        r = n-1
        if nums[0] == target:
            return 0
        if nums[n-1] == target:
            return n-1
        while l < r-1:
            mid = (l + r) // 2
            if nums[mid] == target:
                return mid
            elif nums[mid] > nums[l] :
                if target > nums[l] and target < nums[mid] :
                    r = mid
                else:
                    l = mid
            else:
   
                if target < nums[r] and target > nums[mid] :
                    l = mid
                else:
                    r = mid

        return -1
        
 知识点 二叉树或者二分法
