题目：
Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

An interleaving of two strings s and t is a configuration where they are divided into non-empty substrings such that:

s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b

思路：
简单的思路就是dp + caching 缓存 这个是正着找的


也可以倒着找
aabcc        dbbca
i            j


aadbbcbcac
k

三个指针 注意i + j = k

写写写 写道aad的时候 b在两头都有了 然后就有一个决策树 就很麻烦 但是 对于一个节点(i,j) 可能重复计算了 所以存起来

故而 到这看grid 
    a a b c c _
 d
 b
 b
 c
 a
 _
 存储是否可行
 
 然后就T和F了 所以一个格子是T 就是这个可以写 然后下一个格子的是T的
 
 
 代码：
 正着找的
 class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        if len(s1) + len(s2) != len(s3):
            return False
        
        
        dp = {}
        
        def dfs(i,j):
            if i == len(s1) and j == len(s2):
                return True
            if (i,j) in dp:
                return dp[(i,j)]
            
            if i < len(s1) and s1[i] == s3[i + j] and dfs(i + 1 ,j):
                return True
            if j < len(s2) and s2[j] == s3[i + j] and dfs(i, j + 1):
                return True
            dp[(i,j)] = False
            return False
        
        return dfs(0,0)
        
        
 知识点：
 dp和dfs 正反两个方向
