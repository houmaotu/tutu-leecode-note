题目：
Given an array of non-negative integers nums, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

You can assume that you can always reach the last index.

思路：
可以搞dp慢 贪心快
greedy 有点像BFS
           2 3 1 1 4
           *
min step   0 1 1

            *
min step   0 1 1 2 2

               *
min step   0 1 1 2 2

...

注意到没有超车 可以t步骤到i必然可以t步骤到i-1
所以数组可以分为 0 [一步区]  [二步区] ...

代码：
class Solution:
    def jump(self, nums: List[int]) -> int:
        res = 0
        l, r = 0,0
        
        while r < len(nums) - 1:
            farthest = 0
            for i in range(l,r+1):
                farthest = max(farthest, nums[i] + i)
            l = r + 1
            r = farthest
            
            res += 1
        return res
        
        
知识点：
贪心算法

             
