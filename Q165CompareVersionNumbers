题目：
Given two version numbers, version1 and version2, compare them.

Version numbers consist of one or more revisions joined by a dot '.'. Each revision consists of digits and may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example 2.5.33 and 0.1 are valid version numbers.

To compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their integer value ignoring any leading zeros. This means that revisions 1 and 001 are considered equal. If a version number does not specify a revision at an index, then treat the revision as 0. For example, version 1.0 is less than version 1.1 because their revision 0s are the same, but their revision 1s are 0 and 1 respectively, and 0 < 1.

Return the following:

If version1 < version2, return -1.
If version1 > version2, return 1.
Otherwise, return 0.


思路：
熟悉了字符串的操作就行
先用split拆开了 一个一个比较 都比完了看剩下的合起来是不是没有玩意\

代码：
class Solution:
    def compareVersion(self, version1: str, version2: str) -> int:
        v1 = version1.split('.')
        v2 = version2.split('.')
        while v1 and v2:
            s1 = int(v1.pop(0))
            s2 = int(v2.pop(0))
            
            if s1>s2:
                return 1
            elif s1< s2:

        if v1 and int(''.join(v1))> 0:
            return 1
        if v2 and int(''.join(v2))> 0:
            return -1
        
        return 0
        
  知识点：
  这种不涉及到复杂度的代码 厚毛兔收到神秘力量影响 就会很慢
