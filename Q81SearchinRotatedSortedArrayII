题目：There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).

Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].

Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.

You must decrease the overall operation steps as much as possible.

 
思路：
和之前一样 二分 但是就是要注意想等的情况 比如pop掉后面的 以及

---------
                 --
          ------
的情况

代码：
class Solution:
    def search(self, nums: List[int], target: int) -> bool:
        
        if nums[0] == target :
            return True
        while nums[0] == nums[-1]:
            nums.pop()
            if nums == []:
                return False

        print(nums)     
        
        l = 0
        r = len(nums) - 1
        

        
        while l < r:
            mid = (l + r)//2
            
            if nums[mid] == target:
                return True
            
            if nums[mid] >= nums[l]:
                if nums[l]<= target and target <= nums[mid]:
                    r = mid - 1
                else:
                    l = mid + 1
                
            else:
                if nums[mid] <= target and target <= nums[r]:
                    l = mid + 1
                else:
                    r = mid - 1
        return nums[l] == target or nums[r] == target
        
  知识点 因为有相等 虽然nums[mid] >= nums[l] 这个判断的等号必须放在前面 否则后半段可能因为相等存在其他情况 而且区间长度是2的时候需要停手
