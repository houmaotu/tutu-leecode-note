题目：
Given an m x n board of characters and a list of strings words, return all words on the board.

Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

思路：
就是在一个gird里面match 单词 单词是个list

用tri （prefix tree）来记录单词 这样子可以用dict的in 来constant time查找
然后搞back track 注意记录visit 因为不可以重复

代码：
class TriNode:
    def __init__(self):
        self.children = {}
        self.end = False
        
    def addWord(self,word):
        cur = self
        for ch in word:
            if ch not in cur.children:
                cur.children[ch] = TriNode()
            cur = cur.children[ch]
        cur.end = True

class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        root = TriNode()
        for word in words:
            root.addWord(word)
            
        m, n= len(board), len(board[0])
        res, visit = set(), set()
        
        def dfs(r,c,node,word):
            if r<0 or c<0 or r == m or c == n or (r,c) in visit or board[r][c] not in node.children:
                return
            visit.add((r,c))
            node = node.children[board[r][c]]
            word += board[r][c]
            if node.end:
                res.add(word)
            dfs(r+1,c,node,word)
            dfs(r-1,c,node,word)
            dfs(r,c+1,node,word)
            dfs(r,c-1,node,word)
            
            visit.remove((r,c))
            
        for r in range(m):
            for c in range(n):
                dfs(r,c,root,'')
                
        return list(res)
