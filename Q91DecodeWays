题目：

A message containing letters from A-Z can be encoded into numbers using the following mapping:

'A' -> "1"
'B' -> "2"
...
'Z' -> "26"
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, "11106" can be mapped into:

"AAJF" with the grouping (1 1 10 6)
"KJF" with the grouping (11 10 6)
Note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".

Given a string s containing only digits, return the number of ways to decode it.

The answer is guaranteed to fit in a 32-bit integer

思路：
就是递推公式 比较麻烦 记录prev2 prev1

              i   
    -   -  -  0   - 0-  
        p2 p1
            0  p2  | 
            
              i
  -  -  -  -  -  -
       p2 p1
  k        p1  p1+p2
   
bk         p1   p1

如上情况 i为0 则 上一位必须是1或者2并且必须二位一起读
        i不为 0 则 分上一位和此为可否一起读的两种情况更新
        
初始值：      1  1  1  1
             1  2  3  4          
        0 1   
        
 代码：
 class Solution:
    def numDecodings(self, s: str) -> int:
        n = len(s)
        i = 0
        prev1 = 1
        prev2 = 0
        ss = set(('0','1','2','3','4','5','6'))
        while i< n:
            if s[i] == '0':
                if i-1<0 or (s[i-1] != '1' and s[i-1] != '2'):
                    return 0
                i += 1
                prev2,prev1 = 0, prev2
            else:
                if i - 1 >=0 and (s[i-1] == '1' or (s[i-1] == '2' and s[i] in ss)):
                    i += 1
                    prev1, prev2 = prev1 + prev2, prev1
                else:
                    i += 1
                    prev2 = prev1
        return prev1
    知识点：递推可以不用array 直接更新p1 p2
