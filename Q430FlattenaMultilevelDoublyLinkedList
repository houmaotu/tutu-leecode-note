题目：
You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.

Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.

 思路：
 用stack排队去
 
 代码：
 """
# Definition for a Node.
class Node:
    def __init__(self, val, prev, next, child):
        self.val = val
        self.prev = prev
        self.next = next
        self.child = child
"""

class Solution:
    def flatten(self, head: 'Node') -> 'Node':
        if not head:
            return None
        dummy = Node(0,None,None,None)
        cur = dummy
        stack = [head]
        while stack:
            node = stack.pop()
            if node.next:
                stack.append(node.next)
            if node.child:
                stack.append(node.child)
            
            cur.next = node
            node.prev = cur
            node.child = None
            
            cur = cur.next
        head.prev = None
        return head
        
   知识点：
   我tm开始拼错单词了……妈蛋蛋找了好久问题
