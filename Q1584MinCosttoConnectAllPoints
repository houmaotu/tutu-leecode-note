题目：
You are given an array points representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi].

The cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: |xi - xj| + |yi - yj|, where |val| denotes the absolute value of val.

Return the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.

思路：
Prim's Algorithm

边

visited

和已经有了的一堆 剩下的minheap 按照长度排序 一个一个来

代码：
class Solution:
    def minCostConnectPoints(self, points: List[List[int]]) -> int:
        n = len(points)
        adj = {i:[] for i in range(n)}  #i to [cost node]
        for i in range(n):
            x1,y1 = points[i]
            for j in range(i+1,n):
                x2,y2 = points[j]
                dist = abs(x1-x2) + abs(y1-y2)
                adj[i].append([dist,j])
                adj[j].append([dist,i])
                
                
        #prim
        res = 0
        visit = set()
        minH = [[0,0]]
        while len(visit) < n:
            cost, i = heapq.heappop(minH)
            if i in visit:
                continue
            res += cost
            visit.add(i)
            for neicost,nei in adj[i]:
                if nei not in visit:
                    heapq.heappush(minH,[neicost,nei])
                    
        return res
                
        
        
知识点：
不偷懒的兔兔最卡哇伊！
