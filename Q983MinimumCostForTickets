题目：
You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array days. Each day is an integer from 1 to 365.

Train tickets are sold in three different ways:

a 1-day pass is sold for costs[0] dollars,
a 7-day pass is sold for costs[1] dollars, and
a 30-day pass is sold for costs[2] dollars.
The passes allow that many days of consecutive travel.

For example, if we get a 7-day pass on day 2, then we can travel for 7 days: 2, 3, 4, 5, 6, 7, and 8.
Return the minimum number of dollars you need to travel every day in the given list of days.

思路：
dp 每一天记录最少的钱
要是不在day里面 那就和前一天一样
要是在 那么这一天用的是30天的呢 7天的呢 还是 1天的呢 然后倒会i-天数

代码：
class Solution:
    def mincostTickets(self, days: List[int], costs: List[int]) -> int:
        n = days[-1]
        days = set(days)
        dp = [0] * (n + 1)
        for i in range(1,n + 1):
            if i not in days:
                dp[i] = dp[i-1]
            else:
                dp[i] = min(costs[0] + dp[i-1], costs[1] + dp[max(i-7,0)],costs[2] + dp[max(i-30,0)])
                
        return dp[-1]
            
知识点：
卡哇伊的小兔兔呀！
