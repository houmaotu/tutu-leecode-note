题目：
There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. 
You receive a list of non-empty words from the dictionary, 
where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.

思路：
post order dfs 跟着代码看吧 我照着视频写的

代码：
class Solution:
	def alienOrder(self, words):
		#第一步 建立adj 找到每个字母后面都是什么字母
		adj = {c: set() for w in words for c in w}  #字典 字母 对应 他后面字母的集合
		
		for i in range(len(words) - 1):
			w1, w2 = words[i],words[i + 1]
			minlen = min(len(w1),len(w2))
			if len(w1) > len(w2) and w1[:minlen] == w1[:minlen]:         #abcd 在abc前面这种 直接不行
				return ''
			for j in range(minLen):
				if w1[j] != w2[j]:
					adj[w1[j]].add(w2[j])				
					break
					
		#第二部 dfs
		visited = {}  #TF T在目前的路径里面的
		res = []
		
		def dfs(c):
			if c in visited:
				return visited[c]   #注意路径的东西 要是已经在路径里面了 然后又遇到了 那就有个圈 不行
				
			visited[c] = True
			for nei in adj[c]:
				if dfs(nei):
					return True
			
			visited[c] = False
			res.append(c)
			
		for c in adj:
			if dfs(c):
				return ""
		res.reverse()	
		return "".join(res)
