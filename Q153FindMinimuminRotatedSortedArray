题目：
Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

 思路：
 O(log n)就是二分法嘛

代码：
class Solution:
    def findMin(self, nums: List[int]) -> int:
        if len(nums)==1 or nums[-1] > nums[0]:
            return nums[0]
        
        l = 0
        r = len(nums)
        while l  < r:
            mid = (l + r)//2
            #print(l,r,mid)
            if nums[mid-1] > nums[mid]:
                return nums[mid]
            if nums[mid] > nums[0]:
                l = mid
            else:
                r = mid
      知识点：
      兔兔总算快了一此 98% 基本上的二分法都是用闭区间来找 但是因为必然存在 用开区间也很好
